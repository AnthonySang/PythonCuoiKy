import sqlite3
from tkinter import *
from tkinter import ttk, messagebox
from tkcalendar import DateEntry
from db import get_connection  # H√†m n√†y n√™n return sqlite3.connect("ten_database.db")
from reportlab.pdfgen import canvas
import matplotlib.pyplot as plt


def generate_filtered_report():
    def export_pdf(data):
        c = canvas.Canvas("bao_cao_kho.pdf")
        c.setFont("Helvetica-Bold", 14)
        c.drawString(200, 800, "üì¶ B√ÅO C√ÅO KHO H√ÄNG")

        c.setFont("Helvetica", 10)
        y = 760
        c.drawString(40, y, "T√™n s·∫£n ph·∫©m")
        c.drawString(200, y, "S·ªë l∆∞·ª£ng")
        c.drawString(300, y, "Nh√≥m")
        c.drawString(400, y, "Ng√†y nh·∫≠p")

        y -= 20
        for row in data:
            c.drawString(40, y, str(row[0]))
            c.drawString(200, y, str(row[1]))
            c.drawString(300, y, str(row[2]))
            c.drawString(400, y, str(row[3]))
            y -= 20

        c.save()
        messagebox.showinfo("Xu·∫•t PDF", "ƒê√£ l∆∞u file b√°o c√°o PDF th√†nh c√¥ng!")

    def show_pie_chart(data):
        chart_data = {}
        for row in data:
            nhom = row[2]  # nh√≥m h√†ng
            soluong = int(row[1])
            chart_data[nhom] = chart_data.get(nhom, 0) + soluong

        if not chart_data:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
            return

        labels = list(chart_data.keys())
        sizes = list(chart_data.values())

        plt.figure(figsize=(6, 6))
        plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=90)
        plt.title("üìä Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng theo nh√≥m h√†ng")
        plt.axis("equal")
        plt.show()

    def apply_filter():
        ten = ten_entry.get()
        nhom = nhom_entry.get()
        date = date_entry.get_date()

        query = "SELECT ten, soluong, nhom, ngaynhap FROM kho WHERE 1=1"
        params = []

        if ten:
            query += " AND ten LIKE ?"
            params.append(f"%{ten}%")
        if nhom:
            query += " AND nhom LIKE ?"
            params.append(f"%{nhom}%")
        if date:
            query += " AND ngaynhap = ?"
            params.append(date.strftime('%Y-%m-%d'))

        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute(query, params)
            rows = cur.fetchall()

        # X√≥a b·∫£ng c≈©
        for i in tree.get_children():
            tree.delete(i)

        # Hi·ªÉn th·ªã b·∫£ng m·ªõi
        for row in rows:
            tree.insert("", END, values=row)

        # G√°n n√∫t PDF v√† v·∫Ω bi·ªÉu ƒë·ªì
        btn_pdf.config(command=lambda: export_pdf(rows))
        show_pie_chart(rows)

    # Giao di·ªán b·ªô l·ªçc
    win = Toplevel()
    win.title("üîé B·ªô l·ªçc & B√°o c√°o kho")
    win.geometry("700x550")
    win.configure(bg="#f5f5f5")

    Label(win, text="T√™n s·∫£n ph·∫©m:", bg="#f5f5f5").place(x=20, y=20)
    ten_entry = Entry(win, width=25)
    ten_entry.place(x=150, y=20)

    Label(win, text="Nh√≥m h√†ng:", bg="#f5f5f5").place(x=20, y=60)
    nhom_entry = Entry(win, width=25)
    nhom_entry.place(x=150, y=60)

    Label(win, text="Ng√†y nh·∫≠p:", bg="#f5f5f5").place(x=20, y=100)
    date_entry = DateEntry(win, width=22, background='darkblue',
                           foreground='white', borderwidth=2)
    date_entry.place(x=150, y=100)

    Button(win, text="üîç L·ªçc d·ªØ li·ªáu", bg="#4CAF50", fg="white",
           width=15, command=apply_filter).place(x=150, y=140)

    btn_pdf = Button(win, text="üìÑ Xu·∫•t PDF", bg="#2196F3", fg="white", width=15)
    btn_pdf.place(x=300, y=140)

    # B·∫£ng k·∫øt qu·∫£
    cols = ("T√™n s·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "Nh√≥m", "Ng√†y nh·∫≠p")
    tree = ttk.Treeview(win, columns=cols, show="headings", height=12)
    for col in cols:
        tree.heading(col, text=col)
        tree.column(col, anchor="center")
    tree.place(x=20, y=200, width=650)

    # ƒê∆∞·ªùng k·∫ª cu·ªôn
    scrollbar = ttk.Scrollbar(win, orient="vertical", command=tree.yview)
    scrollbar.place(x=670, y=200, height=260)
    tree.configure(yscrollcommand=scrollbar.set)
